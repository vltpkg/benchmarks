name: Package Manager Benchmarks
on: 
  push:
  workflow_dispatch:

jobs:
  benchmark:
    name: 'Benchmark'
    
    env: 
      COREPACK_ENABLE_STRICT: 0
      COREPACK_ENABLE_AUTO_PIN: 0
      YARN_ENABLE_IMMUTABLE_INSTALLS: false

    strategy:
      fail-fast: false
      matrix:
        platform:

          - name: Linux
            os: ubuntu-latest
            shell: bash
        
          # - name: macOS
          #   os: macos-latest
          #   shell: bash
        
          # - name: Windows
          #   os: windows-latest
          #   shell: cmd

    runs-on: ${{ matrix.platform.os }}
    
    steps:
      
      - uses: actions/checkout@v4
      
      - name: Install Node
        uses: actions/setup-node@v2
        with:
          node-version: '22'

      - name: Install Package Managers & Benchmark Tools
        run: |
          cargo install hyperfine --quiet
          npm install -g npm@latest vlt@latest bun@latest deno-bin@latest --silent
          corepack enable yarn pnpm
      
      - name: Package Manager Versions
        run: |
          echo "npm $(npm -v)"
          echo "vlt $(vlt -v)"
          echo "yarn $(corepack yarn@1 -v)"
          echo "yarn $(corepack yarn@latest -v)"
          echo "pnpm $(corepack pnpm@latest -v)"
          echo "bun $(bun -v)"
          echo "$(deno -v)"

      - name: Configuration
        run: |
          echo "COREPACK_ENABLE_STRICT: ${{ env.COREPACK_ENABLE_STRICT }}"
          echo "COREPACK_ENABLE_AUTO_PIN: ${{ env.COREPACK_ENABLE_AUTO_PIN }}"
          echo "YARN_ENABLE_IMMUTABLE_INSTALLS: ${{ env.YARN_ENABLE_IMMUTABLE_INSTALLS }}"

      - name: Run Project Benchmarks (Next)        
        run: |
          bash scripts/run.sh next

      - name: Run Project Benchmarks (Astro)
        run: |
          cd astro
          hyperfine --export-json=../astro.json --warmup 3 --runs 10 -i --prepare ' \
              rm -rf ./node_modules/; \
              rm -rf .npm*; \
              rm -rf .yarn*; \
              rm -rf .pnp*; \
              rm -rf .vlt*; \
              rm -rf package-lock.json; \
              rm -rf yarn.lock; \
              rm -rf pnpm-lock.yaml; \
              rm -rf vlt-lock.json; \
              rm -rf bun.lockb; \
              rm -rf deno.lock; \
              npm cache clean --force; \
              yarn@1 cache clean --all; \
              yarn@latest cache clean --all; \
              pnpm cache delete *; \
              rm -rf $(vlt config get cache); \
              rm -rf $(bun pm cache); \
              deno clean; \
              npm pkg delete packageManager; \
              git add .; \
              git stash' \
            'npm install --no-audit --no-fund' \
            'corepack yarn@1 install' \
            'corepack yarn@latest install' \
            'corepack pnpm@latest install' \
            'vlt install' \
            'bun install' \
            'deno install --allow-scripts'

      - name: Run Project Benchmarks (Svelte)
        run: |
          cd svelte
          hyperfine --export-json=../svelte.json --warmup 3 --runs 10 -i --prepare ' \
              rm -rf ./node_modules/; \
              rm -rf .npm*; \
              rm -rf .yarn*; \
              rm -rf .pnp*; \
              rm -rf .vlt*; \
              rm -rf package-lock.json; \
              rm -rf yarn.lock; \
              rm -rf pnpm-lock.yaml; \
              rm -rf vlt-lock.json; \
              rm -rf bun.lockb; \
              rm -rf deno.lock; \
              npm cache clean --force; \
              yarn@1 cache clean --all; \
              yarn@latest cache clean --all; \
              pnpm cache delete *; \
              rm -rf $(vlt config get cache); \
              rm -rf $(bun pm cache); \
              deno clean; \
              npm pkg delete packageManager; \
              git add .; \
              git stash' \
            'npm install --no-audit --no-fund' \
            'corepack yarn@1 install' \
            'corepack yarn@latest install' \
            'corepack pnpm@latest install' \
            'vlt install' \
            'bun install' \
            'deno install --allow-scripts'

      - name: Run Project Benchmarks (Vue)
        run: |
          cd vue
          hyperfine --export-json=../vue.json --warmup 3 --runs 10 -i --prepare ' \
              rm -rf ./node_modules/; \
              rm -rf .npm*; \
              rm -rf .yarn*; \
              rm -rf .pnp*; \
              rm -rf .vlt*; \
              rm -rf package-lock.json; \
              rm -rf yarn.lock; \
              rm -rf pnpm-lock.yaml; \
              rm -rf vlt-lock.json; \
              rm -rf bun.lockb; \
              rm -rf deno.lock; \
              npm cache clean --force; \
              yarn@1 cache clean --all; \
              yarn@latest cache clean --all; \
              pnpm cache delete *; \
              rm -rf $(vlt config get cache); \
              rm -rf $(bun pm cache); \
              deno clean; \
              npm pkg delete packageManager; \
              git add .; \
              git stash' \
            'npm install --no-audit --no-fund' \
            'corepack yarn@1 install' \
            'corepack yarn@latest install' \
            'corepack pnpm@latest install' \
            'vlt install' \
            'bun install' \
            'deno install --allow-scripts'

      - name: Upload Benchmark Results
        uses: actions/upload-artifact@v4
        with:
          name: benchmarks-results
          path: |
            next.json
            astro.json
            svelte.json
            vue.json
